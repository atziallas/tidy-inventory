# Name of your application. Used to uniquely configure containers.
service: tidy-inventory

# Name of the container image.
image: atziallas/tidy-django

# Deploy to these servers.
servers:
  web:
    - tziallas.net
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: tidy-demo.tziallas.net
  # Proxy connects to your container on port 80 by default.
  # app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: atziallas

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  dockerfile: django/Dockerfile
  context: "./django"
  # local: false
  # remote: ssh://root@tziallas.net
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= File.read('.ruby-version').strip %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    DB_HOST: tidy-inventory-db
    DJANGO_CONFIGURATION: prod
    ALLOWED_HOST: tidy-demo.tziallas.net
    DEMO_MODE: true
  secret:
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - SECRET_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
ssh:
  user: root
  keys: [ "~/.ssh/Hetzner" ]

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:12.6
    host: tziallas.net
    port: "127.0.0.1:5432:5432"
    env:
      secret:
        - POSTGRES_USER
        - POSTGRES_PASSWORD
    files:
      # - config/mysql/production.cnf:/etc/mysql/my.cnf
      # - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
      - ./db/initdb_personal.sql:/docker-entrypoint-initdb.d/initdb_personal.sql
    directories:
      - postgres:/var/lib/postgresql/data/
  pgadmin:
    image: dpage/pgadmin4:2024-04-29-1
    host: tziallas.net
    port: "8181:8181"
    env:
      secret:
        - PGADMIN_DEFAULT_PASSWORD

    
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
